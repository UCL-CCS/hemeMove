name: Main application
on:
  push:
    branches:
      - main
    paths:
      - Code/**
      - dependencies/**
  pull_request:
    paths:
      - Code/**
      - dependencies/**
  schedule:
    # Run every Monday 0700 UTC
    - cron: '0 7 * * 1'
  workflow_dispatch:
    # Run on demand
    inputs:
      run_long_tests:
        required: true
        default: 'true'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  deps_install_prefix: ${{github.workspace}}/deps-install
  # VMs have 2 cores, double as compilation often IO bound
  CMAKE_BUILD_PARALLEL_LEVEL: 4

jobs:
  basic-checks:
    name: Basic code quality checks

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Check copyright statements
        run: python Scripts/checkCopyright.py

      - name: Check C++ include guards
        run: python Scripts/check_once_guards.py

  fluid_only_build:
    name: Build in fluid-only mode
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Apt update
      shell: bash
      run: sudo apt-get update

    - name: Install Ubuntu-provided dependencies
      shell: bash
      run: >-
        sudo
        apt-get install -y
        libopenmpi-dev
        libtinyxml-dev
        libparmetis-dev
        libboost-dev
        libctemplate-dev

    - uses: actions/cache@v2
      id: deps-cache
      with:
        path: ${{env.deps_install_prefix}}
        key: deps-fluidonly-${{ runner.os }}-${{ hashFiles('dependencies') }}

    - name: "Deps: make build dir"
      if: steps.deps-cache.outputs.cache-hit != 'true'
      run: mkdir -p ${{github.workspace}}/deps-build ${{env.deps_install_prefix}}

    - name: Deps configure
      if: steps.deps-cache.outputs.cache-hit != 'true'
      run: >-
        cmake
        -S ${{github.workspace}}/dependencies
        -B ${{github.workspace}}/deps-build
        -DHEMELB_BUILD_RBC:BOOL=OFF
        -DHEMELB_DEPENDENCIES_INSTALL_PATH:STRING=${{env.deps_install_prefix}}

    - name: Deps install
      if: steps.deps-cache.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/deps-build
      run: >-
        cmake
        --build .

    - name: Code make build dir
      run: mkdir -p ${{github.workspace}}/build

    - name: Code configure
      run: >-
        cmake
        -S ${{github.workspace}}/Code
        -B ${{github.workspace}}/build
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE
        -DHEMELB_DEPENDENCIES_INSTALL_PATH:STRING=${{env.deps_install_prefix}}
        -DHEMELB_BUILD_RBC:BOOL=OFF
        -DMPIEXEC_MAX_NUMPROCS:STRING=4
        -DHEMELB_STEERING_LIB:STRING=none

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build .

    - name: Run main unit tests
      working-directory: ${{github.workspace}}/build
      run: tests/hemelb-tests

  rbc_build:
    name: Build in RBC mode
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Apt update
      shell: bash
      run: sudo apt-get update

    - name: Install Ubuntu-provided dependencies
      shell: bash
      run: >-
        sudo
        apt-get install -y
        libopenmpi-dev
        libtinyxml-dev
        libparmetis-dev
        libboost-dev
        libctemplate-dev
        libhdf5-mpi-dev

    - uses: actions/cache@v2
      id: deps-cache
      with:
        path: ${{env.deps_install_prefix}}
        key: deps-rbc-${{ runner.os }}-${{ hashFiles('dependencies') }}

    - name: "Deps: make build dir"
      if: steps.deps-cache.outputs.cache-hit != 'true'
      run: mkdir -p ${{github.workspace}}/deps-build ${{env.deps_install_prefix}}

    - name: Deps configure
      if: steps.deps-cache.outputs.cache-hit != 'true'
      run: >-
        cmake
        -S ${{github.workspace}}/dependencies
        -B ${{github.workspace}}/deps-build
        -DHEMELB_BUILD_RBC:BOOL=ON
        -DHEMELB_DEPENDENCIES_INSTALL_PATH:STRING=${{env.deps_install_prefix}}

    - name: Deps install
      if: steps.deps-cache.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/deps-build
      run: >-
        cmake
        --build .

    - name: Code make build dir
      run: mkdir -p ${{github.workspace}}/build

    - name: Code configure
      run: >-
        cmake
        -S ${{github.workspace}}/Code
        -B ${{github.workspace}}/build
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE
        -DHEMELB_DEPENDENCIES_INSTALL_PATH:STRING=${{env.deps_install_prefix}}
        -DHEMELB_BUILD_RBC:BOOL=ON
        -DMPIEXEC_MAX_NUMPROCS:STRING=4
        -DHEMELB_STEERING_LIB:STRING=none

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build .

    - name: Run main unit tests
      working-directory: ${{github.workspace}}/build
      run: tests/hemelb-tests

    - name: Run parallel RBC tests
      working-directory: ${{github.workspace}}/build
      run: mpirun --oversubscribe -np 4 tests/mpi_redblood_tests

    - name: Run longer integration tests on schedule or request
      if: github.event == 'scheduled' || (github.event == 'workflow_dispatch' && inputs.run_long_tests == 'true')
      working-directory: ${{github.workspace}}/build
      run: tests/hemelb-tests [long]
