# Triggers
- trigger:
    name: nightly_and_hook
    triggers:
        - github
        - timed: "@midnight"

- trigger:
    name: pull_request_trigger
    triggers:
        - github-pull-request:
            org-list:
                - UCL-CCS
            cron: "H/10 * * * *"
            github-hooks: true
            allow-whitelist-orgs-as-admins: true

# Parameters
- parameter:
    name: sha1
    parameters:
        - string:
            name: sha1
            description: "sha1 of the commit you which to build if building manually."

# A dummy parameter because we cannot have none
- parameter:
    name: dummy
    parameters:
        - bool:
            name: dummy
            default: false
            description: "A dummy parameter"

- publisher:
    name: 'cpp_unit_tests'
    publishers:
        - xunit:
            test-time-margin: 120000
            types:
                - cppunit:
                    pattern: "build/tests/*.xml"

- publisher:
    name: 'slackers'
    publishers:
        - slack:
            team-domain: ucl-ccs
            token: !include ucl-ccs-slack-token
            build-server-url: http://development.rc.ucl.ac.uk/jenkins/
            room: '#hemelb'

- publisher:
    name: 'cppcheck-heme'
    publishers:
        - cppcheck:
            pattern: "cppcheck-result.xml"
            graph:
                xysize: [500, 200]
            display:
                sum: false
                error: true

- builder:
    name: "config_build_test"
    builders:
        - shell: |
            #!/bin/bash -xel
            # Setup environment
            case $os in
                "LegionRHEL7")
                    export MAKEFLAGS=-j4
                    module load jenkins/hemelb/$compiler
                ;;
                "Mavericks")
                    case $compiler in
                        "gnu")
                            export CXX=g++-4.9
                            export CC=gcc-4.9
                        ;;
                        "clang")
                            export CC=/usr/bin/cc
                            export CXX=/usr/bin/c++
                        ;;
                    esac
                    export MAKEFLAGS=-j2
                ;;
            esac

            # cpp check first -- on legion, this must be loaded without tinyxml
            cd $WORKSPACE
            filename=$WORKSPACE/cppcheck-result.xml
            cppcheck --enable=all --xml Code/*.cc Code/*.h $(ls -d Code/*/) 2> $filename

            # # configure and build dependencies
            dep_build_dir=$WORKSPACE/dependencies/build
            mkdir -p $dep_build_dir/fake_install && cd $dep_build_dir
            cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                  -DCMAKE_INSTALL_PREFIX=$dep_build_dir/fake_install \
                  $WORKSPACE/dependencies
            make

            # configure and build code
            build_dir=$WORKSPACE/build
            mkdir -p $build_dir && cd $build_dir
            cmake -DCMAKE_BUILD_TYPE=Debug                           \
                  -DCMAKE_INSTALL_PREFIX=$dep_build_dir/fake_install \
                  -DHEMELB_USE_STREAKLINES='{streaks}'               \
                  -DHEMELB_USE_SSE3='{sse3}'                         \
                  -DHEMELB_STEERING_LIB='{steering}'                 \
                  -DMPIEXEC=$(which mpirun)                          \
                  -DMPIEXEC_MAX_NUMPROCS=4                           \
                  $WORKSPACE/Code
            make

            # run cpp tests
            mkdir -p $build_dir/tests && cd $build_dir
            if [ -e "CTestTestfile.cmake" ] ; then
              ctest -V .
            else
              for testname in $WORKSPACE/build/unittests_*; do
                filename=$(basename $testname)
                mpirun -n 1 $testname -o $build_dir/tests/$filename.xml || true
              done
            fi

            # setup regressions
            reg_dir=$WORKSPACE/regression/hemelb-inputs
            mkdir -p $(dirname $reg_dir)
            [[ -e $reg_dir ]] || git clone git@github.com:UCL-CCS/hemelb-tests.git $reg_dir
            cd $reg_dir

            # run regression
            nodes=$([[ "$os" == "LegionRHEL7" ]] && echo "1" || echo "2")

            result_dir=$reg_dir/results
            hemelb=$build_dir/hemelb

            cd $reg_dir/diffTest/
            mpirun -n $nodes $hemelb -in config.xml -out $result_dir
            export PYTHONPATH="$WORKSPACE/Tools:$PYTHONPATH"
            python ./NumericalComparison CleanExtracted $result_dir/Extracted
