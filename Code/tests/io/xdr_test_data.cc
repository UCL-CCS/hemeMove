
// This file is part of HemeLB and is Copyright (C)
// the HemeLB team and/or their institutions, as detailed in the
// file AUTHORS. This software is provided under the terms of the
// license in the file LICENSE.

#include "tests/io/xdr_test_data.h"

#include <cstdint>
#include <string>

namespace hemelb
{
  namespace tests
  {

    namespace {
      float binflt(uint32_t x) {
        return *reinterpret_cast<float*>(&x);
      }
      double binflt(uint64_t x) {
        return *reinterpret_cast<double*>(&x);
      }
    }
    template<>
    const std::vector<int32_t>& test_data<int32_t>::unpacked() {
      static const std::vector<int32_t> unpacked = {
        0,
        1,
        2,
        4,
        8,
        16,
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32768,
        65536,
        131072,
        262144,
        524288,
        1048576,
        2097152,
        4194304,
        8388608,
        16777216,
        33554432,
        67108864,
        134217728,
        268435456,
        536870912,
        1073741824,
        -2147483648
      };
      return unpacked;
    }
    
    template<>
    const std::vector<char>& test_data<int32_t>::packed() {
      static const std::vector<char> packed = {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00'};
      return packed;
    };
template<>
    const std::vector<int64_t>& test_data<int64_t>::unpacked() {
      static const std::vector<int64_t> unpacked = {
        0L,
        1L,
        2L,
        4L,
        8L,
        16L,
        32L,
        64L,
        128L,
        256L,
        512L,
        1024L,
        2048L,
        4096L,
        8192L,
        16384L,
        32768L,
        65536L,
        131072L,
        262144L,
        524288L,
        1048576L,
        2097152L,
        4194304L,
        8388608L,
        16777216L,
        33554432L,
        67108864L,
        134217728L,
        268435456L,
        536870912L,
        1073741824L,
        2147483648L,
        4294967296L,
        8589934592L,
        17179869184L,
        34359738368L,
        68719476736L,
        137438953472L,
        274877906944L,
        549755813888L,
        1099511627776L,
        2199023255552L,
        4398046511104L,
        8796093022208L,
        17592186044416L,
        35184372088832L,
        70368744177664L,
        140737488355328L,
        281474976710656L,
        562949953421312L,
        1125899906842624L,
        2251799813685248L,
        4503599627370496L,
        9007199254740992L,
        18014398509481984L,
        36028797018963968L,
        72057594037927936L,
        144115188075855872L,
        288230376151711744L,
        576460752303423488L,
        1152921504606846976L,
        2305843009213693952L,
        4611686018427387904L,
        -9223372036854775808L
      };
      return unpacked;
    }
    
    template<>
    const std::vector<char>& test_data<int64_t>::packed() {
      static const std::vector<char> packed = {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'};
      return packed;
    };
template<>
    const std::vector<uint32_t>& test_data<uint32_t>::unpacked() {
      static const std::vector<uint32_t> unpacked = {
        0U,
        1U,
        2U,
        4U,
        8U,
        16U,
        32U,
        64U,
        128U,
        256U,
        512U,
        1024U,
        2048U,
        4096U,
        8192U,
        16384U,
        32768U,
        65536U,
        131072U,
        262144U,
        524288U,
        1048576U,
        2097152U,
        4194304U,
        8388608U,
        16777216U,
        33554432U,
        67108864U,
        134217728U,
        268435456U,
        536870912U,
        1073741824U,
        2147483648U
      };
      return unpacked;
    }
    
    template<>
    const std::vector<char>& test_data<uint32_t>::packed() {
      static const std::vector<char> packed = {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00'};
      return packed;
    };
template<>
    const std::vector<uint64_t>& test_data<uint64_t>::unpacked() {
      static const std::vector<uint64_t> unpacked = {
        0UL,
        1UL,
        2UL,
        4UL,
        8UL,
        16UL,
        32UL,
        64UL,
        128UL,
        256UL,
        512UL,
        1024UL,
        2048UL,
        4096UL,
        8192UL,
        16384UL,
        32768UL,
        65536UL,
        131072UL,
        262144UL,
        524288UL,
        1048576UL,
        2097152UL,
        4194304UL,
        8388608UL,
        16777216UL,
        33554432UL,
        67108864UL,
        134217728UL,
        268435456UL,
        536870912UL,
        1073741824UL,
        2147483648UL,
        4294967296UL,
        8589934592UL,
        17179869184UL,
        34359738368UL,
        68719476736UL,
        137438953472UL,
        274877906944UL,
        549755813888UL,
        1099511627776UL,
        2199023255552UL,
        4398046511104UL,
        8796093022208UL,
        17592186044416UL,
        35184372088832UL,
        70368744177664UL,
        140737488355328UL,
        281474976710656UL,
        562949953421312UL,
        1125899906842624UL,
        2251799813685248UL,
        4503599627370496UL,
        9007199254740992UL,
        18014398509481984UL,
        36028797018963968UL,
        72057594037927936UL,
        144115188075855872UL,
        288230376151711744UL,
        576460752303423488UL,
        1152921504606846976UL,
        2305843009213693952UL,
        4611686018427387904UL,
        9223372036854775808UL
      };
      return unpacked;
    }
    
    template<>
    const std::vector<char>& test_data<uint64_t>::packed() {
      static const std::vector<char> packed = {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'};
      return packed;
    };
template<>
    const std::vector<float>& test_data<float>::unpacked() {
      static const std::vector<float> unpacked = {
        binflt(0U),
        binflt(1U),
        binflt(2U),
        binflt(4U),
        binflt(8U),
        binflt(16U),
        binflt(32U),
        binflt(64U),
        binflt(128U),
        binflt(256U),
        binflt(512U),
        binflt(1024U),
        binflt(2048U),
        binflt(4096U),
        binflt(8192U),
        binflt(16384U),
        binflt(32768U),
        binflt(65536U),
        binflt(131072U),
        binflt(262144U),
        binflt(524288U),
        binflt(1048576U),
        binflt(2097152U),
        binflt(4194304U),
        binflt(8388608U),
        binflt(16777216U),
        binflt(33554432U),
        binflt(67108864U),
        binflt(134217728U),
        binflt(268435456U),
        binflt(536870912U),
        binflt(1073741824U),
        binflt(2147483648U)
      };
      return unpacked;
    }
    
    template<>
    const std::vector<char>& test_data<float>::packed() {
      static const std::vector<char> packed = {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00'};
      return packed;
    };
template<>
    const std::vector<double>& test_data<double>::unpacked() {
      static const std::vector<double> unpacked = {
        binflt(0UL),
        binflt(1UL),
        binflt(2UL),
        binflt(4UL),
        binflt(8UL),
        binflt(16UL),
        binflt(32UL),
        binflt(64UL),
        binflt(128UL),
        binflt(256UL),
        binflt(512UL),
        binflt(1024UL),
        binflt(2048UL),
        binflt(4096UL),
        binflt(8192UL),
        binflt(16384UL),
        binflt(32768UL),
        binflt(65536UL),
        binflt(131072UL),
        binflt(262144UL),
        binflt(524288UL),
        binflt(1048576UL),
        binflt(2097152UL),
        binflt(4194304UL),
        binflt(8388608UL),
        binflt(16777216UL),
        binflt(33554432UL),
        binflt(67108864UL),
        binflt(134217728UL),
        binflt(268435456UL),
        binflt(536870912UL),
        binflt(1073741824UL),
        binflt(2147483648UL),
        binflt(4294967296UL),
        binflt(8589934592UL),
        binflt(17179869184UL),
        binflt(34359738368UL),
        binflt(68719476736UL),
        binflt(137438953472UL),
        binflt(274877906944UL),
        binflt(549755813888UL),
        binflt(1099511627776UL),
        binflt(2199023255552UL),
        binflt(4398046511104UL),
        binflt(8796093022208UL),
        binflt(17592186044416UL),
        binflt(35184372088832UL),
        binflt(70368744177664UL),
        binflt(140737488355328UL),
        binflt(281474976710656UL),
        binflt(562949953421312UL),
        binflt(1125899906842624UL),
        binflt(2251799813685248UL),
        binflt(4503599627370496UL),
        binflt(9007199254740992UL),
        binflt(18014398509481984UL),
        binflt(36028797018963968UL),
        binflt(72057594037927936UL),
        binflt(144115188075855872UL),
        binflt(288230376151711744UL),
        binflt(576460752303423488UL),
        binflt(1152921504606846976UL),
        binflt(2305843009213693952UL),
        binflt(4611686018427387904UL),
        binflt(9223372036854775808UL)
      };
      return unpacked;
    }
    
    template<>
    const std::vector<char>& test_data<double>::packed() {
      static const std::vector<char> packed = {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x08', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x20', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x40', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x80', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'};
      return packed;
    };
template<>
    const std::vector<std::string>& test_data<std::string>::unpacked() {
      static const std::vector<std::string> unpacked = {
        "",
        "a",
        "test",
        "This is a slightly longer string whose length is a multiple of four.",
        "This is a slightly longer string whose length isn't a multiple of four."
      };
      return unpacked;
    }
    
    template<>
    const std::vector<char>& test_data<std::string>::packed() {
      static const std::vector<char> packed = {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x61', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x74', '\x65', '\x73', '\x74', '\x00', '\x00', '\x00', '\x44', '\x54', '\x68', '\x69', '\x73', '\x20', '\x69', '\x73', '\x20', '\x61', '\x20', '\x73', '\x6c', '\x69', '\x67', '\x68', '\x74', '\x6c', '\x79', '\x20', '\x6c', '\x6f', '\x6e', '\x67', '\x65', '\x72', '\x20', '\x73', '\x74', '\x72', '\x69', '\x6e', '\x67', '\x20', '\x77', '\x68', '\x6f', '\x73', '\x65', '\x20', '\x6c', '\x65', '\x6e', '\x67', '\x74', '\x68', '\x20', '\x69', '\x73', '\x20', '\x61', '\x20', '\x6d', '\x75', '\x6c', '\x74', '\x69', '\x70', '\x6c', '\x65', '\x20', '\x6f', '\x66', '\x20', '\x66', '\x6f', '\x75', '\x72', '\x2e', '\x00', '\x00', '\x00', '\x47', '\x54', '\x68', '\x69', '\x73', '\x20', '\x69', '\x73', '\x20', '\x61', '\x20', '\x73', '\x6c', '\x69', '\x67', '\x68', '\x74', '\x6c', '\x79', '\x20', '\x6c', '\x6f', '\x6e', '\x67', '\x65', '\x72', '\x20', '\x73', '\x74', '\x72', '\x69', '\x6e', '\x67', '\x20', '\x77', '\x68', '\x6f', '\x73', '\x65', '\x20', '\x6c', '\x65', '\x6e', '\x67', '\x74', '\x68', '\x20', '\x69', '\x73', '\x6e', '\x27', '\x74', '\x20', '\x61', '\x20', '\x6d', '\x75', '\x6c', '\x74', '\x69', '\x70', '\x6c', '\x65', '\x20', '\x6f', '\x66', '\x20', '\x66', '\x6f', '\x75', '\x72', '\x2e', '\x00'};
      return packed;
    };

  }
}
