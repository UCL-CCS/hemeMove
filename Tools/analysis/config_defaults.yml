results:
    xml_files:
        'results/report.xml':
            total_raw: 'timings/timer[name="Total"]/mean'
            sites: 'geometry/sites'
            images_count: 'results/images'
            snapshots_count: results/snapshots
            domain_decomposition: 'timings/timer[name="Domain Decomposition"]/mean'
            file_read: 'timings/timer[name="File Read"]/mean'
            net: 'timings/timer[name="Net initialisation"]/mean'
            lb: 'timings/timer[name="Lattice Boltzmann"]/mean'
            lb_calc_only: 'timings/timer[name="LB calc only"]/mean'
            visualisation_raw: 'timings/timer[name="Visualisation"]/mean'
            monitoring: 'timings/timer[name="Monitoring"]/mean'
            send: 'timings/timer[name="MPI Send"]/mean'
            wait: 'timings/timer[name="MPI Wait"]/mean'
            snapshots_raw: 'timings/timer[name="Snapshots"]/mean'
            simulation_raw: 'timings/timer[name="Simulation total"]/mean'
            steps: results/steps/total
            snapshot_normalisation: 'timings/timer[name="Snapshots"]/normalisation'
            changeset: build/revision
            reading_group_raw: build/reading_group
            seed_decomposition: 'timings/timer[name="Seed Decomposition"]/mean'
            re_read: 'timings/timer[name="Re Read"]/mean'
            unzip: 'timings/timer[name="Unzip"]/mean'
            moves: 'timings/timer[name="Moves"]/mean'
            parmetis: 'timings/timer[name="Parmetis"]/mean'
            reading_preliminaries: 'timings/timer[name="Read Blocks prelim"]/mean'
            reading_blocks: 'timings/timer[name="Read blocks all"]/mean'
            reading_communications: 'timings/timer[name="Reading communications"]/mean'
            steering_wait_raw: 'timings/timer[name="Steering Client Wait"]/local'
            steering_wait_raw_2: 'timings/timer[name="Steering Client Wait Time"]/local'
            parsing: 'timings/timer[name="Parsing"]/mean'
            read_io: 'timings/timer[name="Read IO"]/mean'
            block_count: 'geometry/blocks'
            sites_per_block: 'geometry/sites_per_block'
            dbg1: 'timings/timer[name="dbg1"]/mean'
            dbg2: 'timings/timer[name="dbg2"]/mean'
            dbg3: 'timings/timer[name="dbg3"]/mean'
            dbg4: 'timings/timer[name="dbg4"]/mean'
            dbg5: 'timings/timer[name="dbg5"]/mean'
        'config.xml':
            cyclesteps: ['simulation','cyclesteps']
            cycles: ['simulation','cycles']
            inlet_pressure_mean: ['inlets/inlet/pressure','mean']
            outlet_pressure_mean: ['outlets/outlet/pressure','mean']
        'tests.xml':
            total_tests: 'Statistics/Tests'
            failing_tests: 'Statistics/FailuresTotal'
    text_files:
        'results/report.txt':
            cores: 'Ran with ([\d]+) threads'
        'CMakeCache.txt':
            build_type: 'CMAKE_BUILD_TYPE:STRING=(.*)'
            streaklines: 'HEMELB_USE_STREAKLINES:BOOL=(.*)'
        'acceptance.txt':
            acceptance: 'Accepted: (.*)'
    gmy_files:
        'config.gmy':
            gmy_fluid_site_count: site_count
            gmy_block_size: block_size
            gmy_block_count: block_count
    name_properties:
        machine_by_name: '(legion|hector|oppenheimer|planck|julian|localhost)'
        type_by_name: '(regression|unittests)'
        name: '(.*)'
    stat_properties:
        'results/report.txt':
            report_created_timestamp: st_mtime
        'tests.xml':
            test_results_timestamp: st_mtime
    mercurial_properties: #Properties based on the mercurial build number
        revision: '{rev}'
        revision_date: '{date|isodate}'
        branch: '{branch}'
    ssv_files:
      'steering_results.txt':
        steering_step: 0
        steering_elapsed_steps: 1
        steering_latitude: 2
        steering_longitude: 3
        steering_elapsed_time: 4
        steering_pixels: 5
        
        
    compound_properties:
        result_timestamp: (report_created_timestamp if report_created_timestamp else test_results_timestamp)
        snapshots_norm: (snapshots_count if normalised else 1.0)
        images_norm: (images_count if normalised else 1.0)
        steering_wait: (steering_wait_raw if steering_wait_raw else steering_wait_raw_2 if steering_wait_raw_2 else 0)
        snapshots: (snapshots_raw * snapshots_norm)
        visualisation: (visualisation_raw * images_norm)
        lb_calc_rate: (sites*steps*1.0)/((cores-1.0)*lb)
        velocity: (sites*steps*1.0/(cores*non_io))
        setup_velocity: (sites*1.0/(cores*setup))
        decomposition_velocity: (sites*1.0/(cores*domain_decomposition))
        need_strategy: ('list' if revision>1738 else 'deal')
        read_velocity: (sites*1.0/(cores*file_read))
        snapshot_velocity: (sites*snapshots_count*1.0/(cores*snapshots))
        visualisation_velocity: (sites*images_count*1.0/(cores*visualisation))
        non_io: (simulation- snapshots - visualisation)
        simulation: (simulation_raw-steering_wait)
        total: (total_raw-steering_wait)
        setup: total-simulation
        sites_per_core: (sites*1.0/cores)
        core_hours: (total*cores*1.0/(60*60))
        kau: (total*cores*125*1.0/(20000*60*60)) #20000 core hours is 125 kAU
        cost: (5.78*kau)
        report_created: (datetime.datetime.fromtimestamp(result_timestamp))
        geometry_type: ('old' if normalised else 'new')
        normalised: (True if snapshot_normalisation else False)
        solid_and_fluid_sites: block_count*sites_per_block
        fluid_fraction: sites*1.0/solid_and_fluid_sites
        gmy_sites_per_block: gmy_block_size**3
        gmy_fluid_fraction: gmy_fluid_site_count*1.0/(gmy_sites_per_block*gmy_block_count)
        reading_group: reading_group_raw if reading_group_raw else 5
        steering_frame_rate: float(len(steering_elapsed_time))/sum(steering_elapsed_time)
        steering_steps_per_frame: sum(steering_elapsed_steps)/float(len(steering_elapsed_steps))
        viscosity: 4e-3
        pressure_diff: (inlet_pressure_mean-outlet_pressure_mean) * 133.3223874
        pipe_length: max(axial_position_z)-min(axial_position_z)+voxel_size/2
        axial_mean_pressure: sum(axial_pressure)/len(axial_pressure)
        axial_position_z: '[x[2]*voxel_size for x in axial_position]'
        radial_position_x: '[x[0]*voxel_size for x in radial_position]'
        radial_velocity_z: '[x[2] for x in radial_velocity]'
        radius: (max(radial_position_x)-min(radial_position_x))/2 + voxel_size/2
        centre_x:  (max(radial_position_x)+min(radial_position_x))/2
        dist_centre: '[abs(pos - centre_x) for pos in radial_position_x]'
        theoretical_radial_velocity:  '[ (1/(4*viscosity)) * (pressure_diff/pipe_length) * (pow(radius,2) - pow(d,2)) for d in dist_centre]'
        residual_velocity_rel: '[(a-b)/(a+b) for a,b in zip(radial_velocity_z,theoretical_radial_velocity)]'
        norm_residual_velocity: max(residual_velocity_rel)

    yaml_files:
        'env.yml':
            type: script
            machine: machine_name
            size: VoxelSize
            profile: profile
            node_type: node_type
            
    extraction_files:
      'results/Extracted/pressure_axial_profile.dat':
        axial_field_count: fieldCount
        axial_pressure: [final,axial_pressure]
        axial_position: [final,grid]
        voxel_size: voxelSizeMetres
      'results/Extracted/velocity_shearstress_2_5_lengths_in.dat':
        radial_velocity: [final,developed_velocity_profile]
        radial_position: [final,grid]
    

graphs:
    performance_versus_size:
        name: "Performance on ${machine} versus number of sites"
        select:
            type: hemelb
        dependent:
          - non_io_total
        independent:
            - sites
    performance_versus_cores:
        name: "Performance on ${machine} versus count of cores"
        select:
            type: hemelb
        dependent:
            - non_io_total
        independent:
            - cores
    sites_versus_voxel_size:
      name: "Number of sites versus voxel size"
      select:
          type: hemelb
      curves:
          - profile
      dependent:
          - sites
      independent:
          - size
            
reports:
  performance_on_planck:
    name: "Performance report for Planck"
    defaults:
      select:
        machine: planck
        acceptance: OK
      curves:
        - build_number
    graphs:
      performance_versus_cores:
        curves:
          - sites
      performance_versus_size:
        curves:
          - cores
  performance_on_oppenheimer:
    name: "Performance report for Oppenheimer"
    defaults:
      select:
        machine: oppenheimer
        acceptance: OK
      curves:
        - build_number
    graphs:
      performance_versus_cores:
        curves:
          - sites
      performance_versus_size:
        curves:
          - cores
      sites_versus_voxel_size:
        curves:
          - cores
